{"version":3,"file":"public/javascripts/app.js","sources":["app/config/app.js","app/config/router.js","app/config/store.js","app/controllers/TodosController.js","app/initialize.js","app/models/Todo.js","app/routes/IndexRoute.js","app/routes/TodosRoute.js","app/templates/application.hbs","app/templates/todos.hbs","app/views/TodosView.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AACA;AACA;AACA;AAJA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApDA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5FA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;A","sourcesContent":["module.exports = Em.Application.create({\n  LOG_TRANSITIONS: true,\n  LOG_TRANSITIONS_INTERNAL: true\n})\n","App.Router.reopen({\n  location: 'history'\n});\n\nApp.Router.map(function() {\n  this.resource('todos', function() {\n    this.route('create');\n    this.resource('todo', { path: ':todo_id' });\n  });\n  this.route('about');\n});\n","App.Adapter = DS.RESTAdapter.extend({\n  namespace: 'api'\n});\n\nApp.ApplicationSerliazer = DS.RESTSerializer.extend({\n  normalize: function(type, hash, property) {\n    hash.id = hash._id;\n    delete hash._id;\n    return this._super(type, hash, property);\n  }\n});\n\nApp.Store = DS.Store.extend({\n  adapter: App.Adapter\n});\n","'use strict';\n\nmodule.exports = App.TodosController = Ember.ArrayController.extend({\n  task: null,\n\n  content: [],\n\n  completedTasks: function() {\n    return this.filterBy('isCompleted', true).length;\n  }.property('content.@each.isCompleted'),\n\n  incompleteTasks: function() {\n    return this.filterBy('isCompleted', false).length;\n  }.property('content.@each.isCompleted'),\n\n  actions: {\n    createTodo: function() {\n      var task = this.get('task'),\n          todo = this.store.createRecord('todo', { task: task, isCompleted: false });\n      todo.save();\n      this.get('content').pushObject(todo);\n      this.set('task', null);\n    },\n\n    removeTodo: function(todo) {\n      todo.deleteRecord();\n      todo.save();\n    },\n\n    completeTodo: function(todo) {\n      todo.toggleProperty('isCompleted');\n      todo.save();\n    },\n\n    showComplete: function() {\n\n    },\n\n    showIncomplete: function() {\n\n    },\n\n    clear: function() {\n      this.get('content').filter(function(record) {\n        return record.get('isCompleted') === true;\n      }).forEach(function(record) {\n        record.deleteRecord();\n        record.save();\n      });\n    }\n  }\n});\n","'use strict';\n\nwindow.App = require('config/app');\nrequire('config/router');\nrequire('config/store');\n\nvar folderOrder = [\n    'initializers', 'mixins', 'routes', 'models',\n    'views', 'controllers', 'helpers',\n    'templates', 'components'\n  ];\n\nfolderOrder.forEach(function(folder) {\n  window.require.list().filter(function(module) {\n    return new RegExp('^' + folder + '/').test(module);\n  }).forEach(function(module) {\n    require(module);\n  });\n});\n","'use strict';\n\nApp.TodoSerializer = App.ApplicationSerliazer.extend();\n\nmodule.exports = App.Todo = DS.Model.extend({\n  task: DS.attr('string'),\n  isCompleted: DS.attr('boolean')\n});\n\n","'use strict';\n\nmodule.exports = App.IndexRoute = Ember.Route.extend({\n  beforeModel: function() {\n    this.transitionTo('todos');\n  }\n});\n","'use strict';\n\nmodule.exports = App.TodosRoute = Ember.Route.extend({\n  model: function() {\n    return this.get('store').find('todo');\n  },\n\n  setupController: function(controller, model) {\n    controller.set('content', model);\n  }\n});\n","module.exports = Ember.TEMPLATES['application'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, stack2, hashTypes, hashContexts, options, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\nfunction program1(depth0,data) {\n  \n  \n  data.buffer.push(\"Todos\");\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  data.buffer.push(\"About\");\n  }\n\n  data.buffer.push(\"<h1>Brunch &amp; Express Todo Demo</h1>\\n\\n<nav>\\n  <ul>\\n    <li>\");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"todos\", options) : helperMissing.call(depth0, \"link-to\", \"todos\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"</li>\\n    <li>\");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"about\", options) : helperMissing.call(depth0, \"link-to\", \"about\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"</li>\\n  </ul>\\n</nav>\\n\\n\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"outlet\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n\");\n  return buffer;\n  \n});","module.exports = Ember.TEMPLATES['todos'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n  <section id=\\\"todo-list\\\">\\n    <ul>\\n      \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"todo\", \"in\", \"content\", {hash:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n    </ul>\\n  </section>\\n  <footer id=\\\"todo-list-footer\\\">\\n    <span class=\\\"view-complete\\\"><button type=\\\"button\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"showComplete\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\">Show complete</button></span>\\n    <span class=\\\"view-incomplete\\\"><button type=\\\"button\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"showIncomplete\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\">Show incomplete</button></span>\\n    <span class=\\\"clear\\\"><button type=\\\"reset\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clear\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\">Clear complete</button></span>\\n    <span class=\\\"count\\\"><strong>Tasks:</strong> \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"content.length\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span>\\n    <span class=\\\"incomplete-tasks\\\"><strong>Remaining:</strong> \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"incompleteTasks\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span>\\n    <span class=\\\"completed\\\"><strong>Done:</strong> \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"completedTasks\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span>\\n  </footer>\\n\");\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n        <li>\\n          <div class=\\\"completed\\\">\\n            <!--class=\\\"complete fa fa-check\\\" -->\\n            <button \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":complete :fa :fa-check todo.isCompleted:done:\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"completeTodo\", \"todo\", {hash:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"></button>\\n          </div>\\n          <div \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":task todo.isCompleted:done:\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\">\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"todo.task\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n          </div>\\n          <div class=\\\"actions\\\">\\n            <button class=\\\"remove fa fa-times\\\" type=\\\"button\\\" class=\\\"remove\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"removeTodo\", \"todo\", {hash:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"></button>\\n          </div>\\n        </li>\\n      \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<header>\\n  \");\n  hashContexts = {'id': depth0,'type': depth0,'valueBinding': depth0,'action': depth0,'placeholder': depth0};\n  hashTypes = {'id': \"STRING\",'type': \"STRING\",'valueBinding': \"STRING\",'action': \"STRING\",'placeholder': \"STRING\"};\n  options = {hash:{\n    'id': (\"new-todo\"),\n    'type': (\"text\"),\n    'valueBinding': (\"task\"),\n    'action': (\"createTodo\"),\n    'placeholder': (\"What do you need to do?\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n</header>\\n\");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"length\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n\");\n  return buffer;\n  \n});","'use strict';\n\nmodule.exports = App.TodosView = Ember.View.extend({\n  focusInput: function() {\n    this.$('#new-todo').focus();\n  }.on('didInsertElement')\n});\n"]}